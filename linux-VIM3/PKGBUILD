# AArch64 for Khadas VIM3 Pro with Amlogic A311 SoC
# Maintainer: Alexey Kharkovskii <svetonomer@gmail.com>
pkgbase=linux
pkgname="$pkgbase-VIM3"
pkgver=5.19.4
srcname=linux-$pkgver
pkgrel=1
arch=('aarch64')
url="http://www.kernel.org/"
license=('GPL2')
provides=("linux=${pkgver}" "$pkgbase-headers=${pkgver}")
makedepends=('docbook-xsl' 'kmod' 'bc' 'git' 'uboot-VIM3' 'uboot-tools' 'dtc')
#options=('!strip')
source=("http://www.kernel.org/pub/linux/kernel/v5.x/$srcname.tar.xz"
        "http://www.kernel.org/pub/linux/kernel/v5.x/patch-${pkgver}.xz"
        'config'
	'uart3.patch'
)
md5sums=('265cc2d141ebcfaad7d5c62e85b38c0e'
         'd89c87a448cca0f1192666e538984761'
         '36093237048ea7b94004bcd80f8283ca'
         'da8abb76cae74cc7bd75a00b403ca70c')

prepare() {
	cd "$srcname"
	echo ${srcdir}
	echo "Preparing package..."

	cp "${srcdir}/config" .config
	patch --strip=1 --input="${srcdir}/uart3.patch"
}

build() {
	cd "$srcname"
	echo "Building sources..."
	make 
}

##Launch this after building sources or place this to another corresponding PKBUILD
#package_linux-VIM3-headers() {
#	cd "$srcname"
#	kernver="$(make -s kernelrelease)"
#	make mrproper
#	make O=$pkgdir/usr/src/linux-headers-$kernver defoldconfig
#	make O=$pkgdir/usr/src/linux-headers-$kernver modules_prepare
#
#	rm $pkgdir/lib/modules/$kernver/{build,source}
#	rm $pkgdir/usr/src/linux-headers-$kernver/source
#	ln -s $pkgdir/usr/src/linux-headers-$kernver $pkgdir/lib/modules/$kernver/build
#	ln -s $pkgdir/usr/src/linux-headers-$kernver $pkgdir/lib/modules/$kernver/source
#	cp Module.symvers $pkgdir/usr/src/linux-headers-$kernver
#}

package() {
	cd "$srcname"
	mkdir $pkgdir/boot

	echo "Installing Kernel Modules..."
	INSTALL_MOD_PATH="$pkgdir/usr" make modules_install

	echo "Generating U-BOOT Kernel image..."
	objcopy -O binary -R .note -R .comment -S vmlinux linux.bin
	gzip -f -9 linux.bin
	mkimage -A arm64 -O linux -T kernel -C gzip -a 0 -e 0 -n "Linux Kernel Image" -d linux.bin.gz $pkgdir/boot/zImage_arch
	#gzip -9k vmlinux
	#mkimage -A arm64 -O linux -T kernel -C gzip -d vmlinux.gz $pkgdir/boot/zImage_arch
	
	kernver="$(make -s kernelrelease)"
	echo "Generating Initial Ramdisk..."
	mkinitcpio -r $pkgdir/usr -k $kernver -z gzip -g initramfs-linux.img

	echo "Generating U-BOOT Ramdisk image..."
	mkimage -A arm64 -O linux -T ramdisk -C gzip -d initramfs-linux.img $pkgdir/boot/uInitrd_arch

	echo "Copy device blob file..."
	cp arch/arm64/boot/dts/amlogic/meson-g12b-a311d-khadas-vim3.dtb $pkgdir/boot/
}

#package_linux-VIM3-headers(){
#  pkgdesc="Header files and scripts for building modules for linux kernel - ${pkgver}"
#  provides=("linux-headers=${pkgver}")
#  conflicts=('linux-headers')
#
#  cd ${srcname}
#  KARCH=arm64
#  local builddir="${pkgdir}/usr/lib/modules/${kernver}/build"
#
#  echo "Installing build files..."
#  echo "Current dir "$PWD
#  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map vmlinux
#  install -Dt "$builddir/kernel" -m644 kernel/Makefile
#  install -Dt "$builddir/arch/${KARCH}" -m644 arch/${KARCH}/Makefile
#  cp -t "$builddir" -a scripts
#
#  # add xfs and shmem for aufs building
#  mkdir -p "$builddir"/{fs/xfs,mm}
#
#  echo "Installing headers..."
#  cp -t "$builddir" -a include
#  cp -t "$builddir/arch/${KARCH}" -a arch/${KARCH}/include
#  install -Dt "$builddir/arch/${KARCH}/kernel" -m644 arch/${KARCH}/kernel/asm-offsets.s
#  mkdir -p "$builddir/arch/arm"
#  cp -t "$builddir/arch/arm" -a arch/arm/include
#
#  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
#  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h
#
#  # https://bugs.archlinux.org/task/13146
#  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h
#
#  # https://bugs.archlinux.org/task/20402
#  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
#  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
#  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h
#
#  # https://bugs.archlinux.org/task/71392
#  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h
#
#  echo "Installing KConfig files..."
#  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;
#
#  echo "Removing unneeded architectures..."
#  local arch
#  for arch in "$builddir"/arch/*/; do
#    [[ $arch = */${KARCH}/ || $arch == */arm/ ]] && continue
#    echo "Removing $(basename "$arch")"
#    rm -r "$arch"
#  done
#
#  echo "Removing documentation..."
#  rm -r "$builddir/Documentation"
#
#  echo "Removing broken symlinks..."
#  find -L "$builddir" -type l -printf 'Removing %P\n' -delete
#
#  echo "Removing loose objects..."
#  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete
#
#  echo "Stripping build tools..."
#  local file
#  while read -rd '' file; do
#    case "$(file -bi "$file")" in
#      application/x-sharedlib\;*)      # Libraries (.so)
#        strip -v $STRIP_SHARED "$file" ;;
#      application/x-archive\;*)        # Libraries (.a)
#        strip -v $STRIP_STATIC "$file" ;;
#      application/x-executable\;*)     # Binaries
#        strip -v $STRIP_BINARIES "$file" ;;
#      application/x-pie-executable\;*) # Relocatable binaries
#        strip -v $STRIP_SHARED "$file" ;;
#    esac
#  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)
#
#  echo "Adding symlink..."
#  mkdir -p "$pkgdir/usr/src"
#  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
#}
